#!/usr/bin/env ash

# Copyright (c) 2015, Ezurio
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# contact: support@ezurio.com

[ "${protocol}" == dhcp ] && [ -n "${DHCP_PARAMS}" ] || return 0

eval ${DHCP_PARAMS} 2>/dev/null
test -f /etc/dhcp/dhcpcd.conf && . /etc/dhcp/dhcpcd.conf
test -f /etc/dhcp/dhcpcd.${interface}.conf && . /etc/dhcp/dhcpcd.${interface}.conf
# Some settings may be passed in as DHCP_PARAMS via the shell environment, and
# will be overridden by those from the dhcpcd[.<iface>].conf files. Otherwise,
# default values are set (below) from expanded right-most string as necessary.

# Debug support.
: ${LOGFILE:=${log:-'/dev/null'}}
: ${VERBOSE:=${vb:-''}}
[ -n "${VERBOSE}" ] && vecho=echo || vecho=:

# Extensions.
: ${VENDORINFO_HOOK:=${vendorinfo_hook:-''}}
: ${BOOTFILE_HOOK:=${bootfile_hook:-''}}
: ${ONEVENT_HOOK:=${onevent_hook:-''}}
: ${RESOLV_HOOK:=${resolv_hook:-''}}

# The leases file is maintained in a 'dhclient' compatible format, w/last
# event state action, plus the previous lease info and current lease info.
# Assign a file name per interface, and ensure it exists w/ a lease block.
# Also create a /tmp destination for the leases file, if necessary.
: ${LEASES_FILE:=${leases_file:-/var/lib/dhcp/dhclient.${interface}.leases}}
test -d ${LEASES_FILE%/*} || ln -sf /tmp ${LEASES_FILE%/*}
test -s ${LEASES_FILE} || printf "\nlease {\n}\n" >${LEASES_FILE}

write_lease_info() {
  # calculate expiry info: renew=50%, rebind=87.5%, and expire=100%
  # expiry format is UTC: DayOfWeek Year/Month/Day Hour:Minute:Second [TZ]
  dateT1=$((dateRT+${new_dhcp_lease_time:-0}/2))
  dateT2=$((dateRT+${new_dhcp_lease_time:-0}*875/1000))
  dateT3=$((dateRT+${new_dhcp_lease_time:-0}))

  # store wireless ap_indentifier MAC SSID
  test -d /sys/class/net/${interface}/phy80211 \
    && apid=$( iw dev ${interface} link \
             |sed '/.:../{N;s/.* \(..:.[^ ]*\).*\n.*SSID: \(.*\)/\1 "\2"/;q}' )
  # add
  extra_options=''
  # formatted with: '\n  <content>;'
  extra_options="${extra_options}${apid:+
  option ap-identifier ${apid};}"

  # make new copy of leases file, while retaining other non-lease info,
  # get just the previous lease-entry and then append current lease-entry
  sed '/^leas/,$!p;/^leas/h;/^leas/!H;$!b;x;/^leas/,$p' -n $1 >$1~

  cat >>${1}~ <<- EOF
	lease {
	  interface "${interface}";${extra_options}
	  option fixed-address ${new_ip_address};
	  option broadcast-address ${new_broadcast_address};
	  option subnet-mask ${new_subnet_mask};
	  option routers ${new_routers};
	  option domain-name "${new_domain_name}";
	  option domain-name-servers ${new_domain_name_servers};
	  option dhcp-server-identifier ${new_dhcp_server_identifier};
	  option dhcp-message-type ${new_dhcp_message_type};
	  option dhcp-lease-time ${new_dhcp_lease_time};
	  option dhcp-rebinding-time ${new_dhcp_rebinding_time};
	  option dhcp-renewal-time ${new_dhcp_renewal_time};
	  renew $(date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT1);
	  rebind $(date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT2);
	  expire $(date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT3);
	}
	EOF

  mv -f ${1}~ ${1}
}

do_source() {
  [ -f "${1}" ] || return 0

  ${vecho} "$@" >>${LOGFILE}
  "$@" >>${LOGFILE} 2>&1 \
    || ${vecho} "  $1 - error $?" >>${LOGFILE}
}

fn() {
  # capture the passed in command and args with error context to logfile
  exec 3>&1; fn_x=$( $@ 2>&1 1>&3 ) && x=\+ || x=\?; exec 3>&-
  ${vecho} -e $x $@${fn_x:+\\\n${fn_x}} >>${LOGFILE}
  test "$x" != \?
}

exit_err() { echo "__${0} - error: $@" >>${LOGFILE}; exit 1; }

# DHCP event
S='          '
dateRT=$( date +%s )
esa=$( date +"# esa: ${S:${#1}}$1 - %u %Y/%m/%d %H:%M:%S" -d@$dateRT )

# Update leases file w/ this event state action.
sed -e "/^${esa:0:17}/d;/^ *$/{$!d};1,/}/{/^leas/{s,^,${esa}\n\n,}}" \
    -e "1{/# via:.*${0##*/}/b;s,^,# via: $0\n#\n,}" \
    -i ${LEASES_FILE}

# Cap log file size; disable logging if over 100-blocks.
if [ "${LOGFILE}" != /dev/null ]; then
  test 0$( stat -c %s ${LOGFILE} 2>/dev/null ) -le 102400 \
    || LOGFILE=/dev/null
fi

read -rs us is </proc/uptime
printf "% 13.2f __$0 $@ ${ip:+ IP:$ip}\n" $us >>${LOGFILE}

case "${reason}" in
BOUND|RENEW|REBOOT|INFORM)
  # Call a bootfile-option-handler if set and it exists.
  [ -z "${bootfile_name}" ] || do_source ${BOOTFILE_HOOK}

  # Call a vendorinfo-handler if set and it exists.
  [ -z "${new_vendor_encapsulated_options}" ] || do_source ${VENDORINFO_HOOK}

  do_source ${RESOLV_HOOK}

  write_lease_info ${LEASES_FILE}
  ;;
esac

# Call an on-event-action-handler if set and it exists.
do_source ${ONEVENT_HOOK}
